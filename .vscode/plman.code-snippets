{
	// Place your plman workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $2, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$2');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	

	"doact": {
		"scope": "prolog",
		"prefix": "doact",
		"body": [
			"do(ACT) :-", 
			"  ${3:not}(havingObject(appearance(${2:_}))),",
			"  r$1(ACT).",
		],
		"description": "rules"
	},

	"doif": {
		"scope": "prolog",
		"prefix": "doif",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"\tvision($2, '${3:#}').",
		],
		"description": "move if see"
	},

	"doifnot": {
		"scope": "prolog",
		"prefix": "doifnot",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"\tnot(vision($2, '${3:#}')).",
		],
		"description": "move if see"
	},

	"notSee": {
		"scope": "prolog",
		"prefix": "no",
		"body": [
			"not(vision($2, '${3:#}')),",
		],
		"description": "If not see"
	},

	"rMove": {
		"scope": "prolog",
		"prefix": "r",
		"body": [
			"r$2(${1:inicio},move($3)).",
		],
		"description": "To move"
	},

	"rVision": {
		"scope": "prolog",
		"prefix": "vis",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  ${5:not}(vision($3, '${4:#}')),",
			"  writeln('r$2 vision $5 to $3')."
		],
		"description": "To move if not see"
	},


	"multiVision": {
		"scope": "prolog",
		"prefix": "multiVision",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  multiVision(",
			"    '${4: }', '${5: }', '${6: }',",
			"    '${7: }', '${12: }', '${8: }',",
			"    '${9: }', '${10: }', '${11: }'),",
			"  writeln('r$2 multiVision to $3')."
		],
		"description": "To move watching all enviroment"
	},

	"visionLeft": {
		"scope": "prolog",
		"prefix": "visionLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionLeft(",
			"    '${4: }', /**//**/",
			"    '${5: }', '${7: }'/**/,",
			"    '${6: }' /**//**/),",
			"  writeln('r$2 visionLeft to $3')."
		],
		"description": "To move watching left side"
	},

	"visionRight": {
		"scope": "prolog",
		"prefix": "visionRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionRight(",
			"    /**//**/'${4: }',",
			"    /**/'${7: }','${5: }',",
			"    /**//**/'${6: }'),",
			"  writeln('r$2 visionRight to $3')."
		],
		"description": "To move watching Right side"
	},

	"visionUp": {
		"scope": "prolog",
		"prefix": "visionUp",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionUp(",
			"    '${4: }','${5: }','${6: }',",
			"    /**/'${7: }' /**/",
			"    /**//**//**/),",
			"  writeln('r$2 visionUp to $3')."
		],
		"description": "To move watching Up side"
	},

	"visionDown": {
		"scope": "prolog",
		"prefix": "visionDown",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionDown(",
			"    /**//**//**/",
			"    /**/'${7: }'/**/,",
			"    '${4: }','${5: }','${6: }'),",
			"  writeln('r$2 visionDown to $3')."
		],
		"description": "To move watching Down side"
	},

	"visionUpLeft": {
		"scope": "prolog",
		"prefix": "visionUpLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionUpLeft(",
			"    '${4: }', '${5: }',/**/",
			"    '${6: }', '${7: }'/**/",
			"    /**//**//**/),",
			"  writeln('r$2 visionUpLeft to $3')."
		],
		"description": "To move watching UpLeft side"
	},

	"visionUpRight": {
		"scope": "prolog",
		"prefix": "visionUpRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionUpRight(",
			"    /**/'${4: }','${5: }',",
			"    /**/'${7: }','${6: }'",
			"    /**//**//**/),",
			"  writeln('r$2 visionUpRight to $3')."
		],
		"description": "To move watching UpRight side"
	},

	"visionDownLeft": {
		"scope": "prolog",
		"prefix": "visionDownLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionDownLeft(",
			"    /**//**//**/",
			"    '${6: }','${7: }'/**/,",
			"    '${4: }','${5: }'/**/),",
			"  writeln('r$2 visionDownLeft to $3')."
		],
		"description": "To move watching DownLeft side"
	},

	"visionDownRight": {
		"scope": "prolog",
		"prefix": "visionDownRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  visionDownRight(",
			"    /**//**//**/",
			"    /**/'${7: }','${4: }',",
			"    /**/'${5: }','${6: }'),",
			"  writeln('r$2 visionDownRight to $3')."
		],
		"description": "To move watching DownRight side"
	},

	"wideVisionLeft": {
		"scope": "prolog",
		"prefix": "wideVisionLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionLeft(",
			"    '${4: }', '${7: }'/**/,",
			"    '${5: }', '${9: }'/**/,",
			"    '${6: }', '${8: }'/**/),",
			"  writeln('r$2 wideVisionLeft to $3')."
		],
		"description": "To move watching all Left"
	},

	"wideVisionRight": {
		"scope": "prolog",
		"prefix": "wideVisionRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionRight(",
			"    /**/'${7: }','${4: }',",
			"    /**/'${9: }','${5: }',",
			"    /**/'${8: }','${6: }'),",
			"  writeln('r$2 wideVisionRight to $3')."
		],
		"description": "To move watching all Right"
	},

	"wideVisionUp": {
		"scope": "prolog",
		"prefix": "wideVisionUp",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionUp(",
			"    '${4: }', '${5: }','${6: }',",
			"    '${7: }', '${9: }','${8: }'",
			"    /**//**//**/),",
			"  writeln('r$2 wideVisionUp to $3')."
		],
		"description": "To move watching all Up"
	},

	"wideVisionDown": {
		"scope": "prolog",
		"prefix": "wideVisionDown",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionDown(",
			"    /**//**//**/",
			"    '${7: }', '${9: }','${8: }',",
			"    '${4: }', '${5: }','${6: }'),",
			"  writeln('r$2 wideVisionDown to $3')."
		],
		"description": "To move watching all Down"
	},

	"wideVisionUpLeft": {
		"scope": "prolog",
		"prefix": "wideVisionUpLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionUpLeft(",
			"    '${4: }', '${5: }','${6: }',",
			"    '${7: }', '${9: }'/**/,",
			"    '${8: }' /**//**/),",
			"  writeln('r$2 wideVisionUpLeft to $3')."
		],
		"description": "To move watching all UpLeft"
	},

	"wideVisionUpRight": {
		"scope": "prolog",
		"prefix": "wideVisionUpRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionUpRight(",
			"    '${4: }','${5: }','${6: }',",
			"    /**/'${9: }','${7: }',",
			"    /**//**/'${8: }'),",
			"  writeln('r$2 wideVisionUpRight to $3')."
		],
		"description": "To move watching all UpRight"
	},

	"wideVisionDownLeft": {
		"scope": "prolog",
		"prefix": "wideVisionDownLeft",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionDownLeft(",
			"    '${7: }' /**//**/,",
			"    '${8: }', '${9: }'/**/,",
			"    '${4: }', '${5: }','${6: }'),",
			"  writeln('r$2 wideVisionDownLeft to $3')."
		],
		"description": "To move watching all DownLeft"
	},

	"wideVisionDownRight": {
		"scope": "prolog",
		"prefix": "wideVisionDownRight",
		"body": [
			"r$2(${1:inicio},move($3)):-",
			"  wideVisionDownRight(",
			"    /**//**/'${7: }',",
			"    /**/'${9: }','${8: }',",
			"    '${4: }','${5: }','${6: }'),",
			"  writeln('r$2 wideVisionDownRight to $3')."
		],
		"description": "To move watching all DownRight"
	},

}
