{
	// Place your plman workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $2, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$2');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	

	"doact": {
		"scope": "prolog",
		"prefix": "doact",
		"body": [
			"do(ACT) :-", 
			"  ${3:not}(havingObject(appearance(${2:_}))),",
			"  r$1(ACT).",
		],
		"description": "rules"
	},

	"doif": {
		"scope": "prolog",
		"prefix": "doif",
		"body": [
			"r$1(move($2)):-",
			"\tsee(normal, $2, '${3:#}'),",
		],
		"description": "move if see"
	},

	"doifnot": {
		"scope": "prolog",
		"prefix": "doifnot",
		"body": [
			"r$1(move($2)):-",
			"\tnot(see(normal, $2, '${3:#}')),",
		],
		"description": "move if see"
	},

	"notSee": {
		"scope": "prolog",
		"prefix": "no",
		"body": [
			"not(see(normal, $2, '${3:#}')),",
		],
		"description": "If not see"
	},

	"doMove": {
		"scope": "prolog",
		"prefix": "do",
		"body": [
			"r$1(move($2)).",
		],
		"description": "To move"
	},

	"doMoveNotSee": {
		"scope": "prolog",
		"prefix": "dono",
		"body": [
			"r$1(move($2)):-",
			"  not(see(normal, $2, '${3:#}')),",
			"  writeln('r$1 multiVision to $2')."
		],
		"description": "To move if not see"
	},

	"multiVision": {
		"scope": "prolog",
		"prefix": "multiVision",
		"body": [
			"r$1(move($2)):-",
			"  multiVision(",
			"    '${3: }', '${4: }', '${5: }',",
			"    '${6: }', '${10: }', '${7: }',",
			"    '${8: }', '${8: }', '${9: }'),",
			"  writeln('r$1 multiVision to $2')."
		],
		"description": "To move watching all enviroment"
	},

	"visionLeft": {
		"scope": "prolog",
		"prefix": "visionLeft",
		"body": [
			"r$1(move($2)):-",
			"  visionLeft(",
			"    '${3: }', /**//**/",
			"    '${4: }', '${6: }'/**/,",
			"    '${5: }' /**//**/),",
			"  writeln('r$1 visionLeft to $2')."
		],
		"description": "To move watching left side"
	},

	"visionRight": {
		"scope": "prolog",
		"prefix": "visionRight",
		"body": [
			"r$1(move($2)):-",
			"  visionRight(",
			"    /**//**/'${3: }',",
			"    /**/'${6: }','${4: }',",
			"    /**//**/'${5: }'),",
			"  writeln('r$1 visionRight to $2')."
		],
		"description": "To move watching Right side"
	},

	"visionUp": {
		"scope": "prolog",
		"prefix": "visionUp",
		"body": [
			"r$1(move($2)):-",
			"  visionUp(",
			"    '${3: }','${4: }','${5: }',",
			"    /**/'${6: }' /**/",
			"    /**//**//**/),",
			"  writeln('r$1 visionUp to $2')."
		],
		"description": "To move watching Up side"
	},

	"visionDown": {
		"scope": "prolog",
		"prefix": "visionDown",
		"body": [
			"r$1(move($2)):-",
			"  visionDown(",
			"    /**//**//**/",
			"    /**/'${6: }'/**/,",
			"    '${3: }','${4: }','${5: }'),",
			"  writeln('r$1 visionDown to $2')."
		],
		"description": "To move watching Down side"
	},

	"visionUpLeft": {
		"scope": "prolog",
		"prefix": "visionUpLeft",
		"body": [
			"r$1(move($2)):-",
			"  visionUpLeft(",
			"    '${3: }', '${4: }',/**/",
			"    '${5: }', '${6: }'/**/",
			"    /**//**//**/),",
			"  writeln('r$1 visionUpLeft to $2')."
		],
		"description": "To move watching UpLeft side"
	},

	"visionUpRight": {
		"scope": "prolog",
		"prefix": "visionUpRight",
		"body": [
			"r$1(move($2)):-",
			"  visionUpRight(",
			"    /**/'${3: }','${4: }',",
			"    /**/'${6: }','${5: }'",
			"    /**//**//**/),",
			"  writeln('r$1 visionUpRight to $2')."
		],
		"description": "To move watching UpRight side"
	},

	"visionDownLeft": {
		"scope": "prolog",
		"prefix": "visionDownLeft",
		"body": [
			"r$1(move($2)):-",
			"  visionDownLeft(",
			"    /**//**//**/",
			"    '${5: }','${6: }'/**/,",
			"    '${3: }','${4: }'/**/),",
			"  writeln('r$1 visionDownLeft to $2')."
		],
		"description": "To move watching DownLeft side"
	},

	"visionDownRight": {
		"scope": "prolog",
		"prefix": "visionDownRight",
		"body": [
			"r$1(move($2)):-",
			"  visionDownRight(",
			"    /**//**//**/",
			"    /**/'${6: }','${3: }',",
			"    /**/'${4: }','${5: }'),",
			"  writeln('r$1 visionDownRight to $2')."
		],
		"description": "To move watching DownRight side"
	},

	"wideVisionLeft": {
		"scope": "prolog",
		"prefix": "wideVisionLeft",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionLeft(",
			"    '${3: }', '${6: }'/**/,",
			"    '${4: }', '${8: }'/**/,",
			"    '${5: }', '${7: }'/**/),",
			"  writeln('r$1 wideVisionLeft to $2')."
		],
		"description": "To move watching all Left"
	},

	"wideVisionRight": {
		"scope": "prolog",
		"prefix": "wideVisionRight",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionRight(",
			"    /**/'${6: }','${3: }',",
			"    /**/'${8: }','${4: }',",
			"    /**/'${7: }','${5: }'),",
			"  writeln('r$1 wideVisionRight to $2')."
		],
		"description": "To move watching all Right"
	},

	"wideVisionUp": {
		"scope": "prolog",
		"prefix": "wideVisionUp",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionUp(",
			"    '${3: }', '${4: }','${5: }',",
			"    '${6: }', '${8: }','${7: }'",
			"    /**//**//**/),",
			"  writeln('r$1 wideVisionUp to $2')."
		],
		"description": "To move watching all Up"
	},

	"wideVisionDown": {
		"scope": "prolog",
		"prefix": "wideVisionDown",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionDown(",
			"    /**//**//**/",
			"    '${6: }', '${8: }','${7: }',",
			"    '${3: }', '${4: }','${5: }'),",
			"  writeln('r$1 wideVisionDown to $2')."
		],
		"description": "To move watching all Down"
	},

	"wideVisionUpLeft": {
		"scope": "prolog",
		"prefix": "wideVisionUpLeft",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionUpLeft(",
			"    '${3: }', '${4: }','${5: }',",
			"    '${6: }', '${8: }'/**/,",
			"    '${7: }' /**//**/),",
			"  writeln('r$1 wideVisionUpLeft to $2')."
		],
		"description": "To move watching all UpLeft"
	},

	"wideVisionUpRight": {
		"scope": "prolog",
		"prefix": "wideVisionUpRight",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionUpRight(",
			"    '${3: }','${4: }','${5: }',",
			"    /**/'${8: }','${6: }',",
			"    /**//**/'${7: }'),",
			"  writeln('r$1 wideVisionUpRight to $2')."
		],
		"description": "To move watching all UpRight"
	},

	"wideVisionDownLeft": {
		"scope": "prolog",
		"prefix": "wideVisionDownLeft",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionDownLeft(",
			"    '${6: }' /**//**/,",
			"    '${7: }', '${8: }'/**/,",
			"    '${3: }', '${4: }','${5: }'),",
			"  writeln('r$1 wideVisionDownLeft to $2')."
		],
		"description": "To move watching all DownLeft"
	},

	"wideVisionDownRight": {
		"scope": "prolog",
		"prefix": "wideVisionDownRight",
		"body": [
			"r$1(move($2)):-",
			"  wideVisionDownRight(",
			"    /**//**/'${6: }',",
			"    /**/'${8: }','${7: }',",
			"    '${3: }','${4: }','${5: }'),",
			"  writeln('r$1 wideVisionDownRight to $2')."
		],
		"description": "To move watching all DownRight"
	},

}
